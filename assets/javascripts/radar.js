let selectedTract;

function createVulnerabilityMap(data) {
  const colors = d3.scaleOrdinal()
    .domain(['Extremely low', 'Moderately low', 'Moderate', 'Moderately high', 'Extremely high'])
    .range(['#0063e6', '#8accff', '#fcfcab', '#ffb624', '#ff5a50'])
    .unknown(['#ffffff']);
  const path = d3.geoPath().projection(null);
  d3.select('.climate-map')
    .append('g')
    .attr('class', 'climate-map__heat')
    .selectAll('path')
    .data(data)
    .enter()
    .append('path')
    .attr('fill', d => colors(d.properties.vl_ht_c))
    .attr('opacity', '0.8')
    .attr('class', 'census-tract')
    .attr('d', path)
    .on('click', data => updateCharts(data) )

  textTriangleGroup = d3.select('.climate-map')
    .append('g')

  textTangle = textTriangleGroup
    .append('rect')
    .attr('width', 450)
    .attr('height', 100)
    .style('stroke-width', 0)
    .style('stroke', 'rgb(0,0,0)')
    .style('fill', 'rgb(255,255,255,.8)')
    .attr("class", "climate-map__title-wrapper")

  textBox = textTriangleGroup
    .append('text')
    .attr('x', 0)
    .attr('y', 0)

  textBox.append('tspan')
    .attr('x', 10)
    .attr('text-anchor', 'left')
    .attr('dy', '1.2em')
    .style('font-size', '1.5rem')
    .style('font-weight', '600')
    .style('font-family', 'CalibreWeb-Semibold')
    .style('color', '#101436')
    .text('Vulnerability Map')

  textBox.append('tspan')
    .attr('x', 10)
    .attr('dy', '1.2em')
    .attr('text-anchor', 'left')
    .style('font-size', '1.875rem')
    .style('font-family', 'SwiftNeueLTPro')
    .style('color', '#101436')
    .text('Boston Harbor Flood Risk Model')
    .attr("class", "climate-map__title")

  textBox.append('tspan')
    .attr('x', 10)
    .attr('dy', '1.5em')
    .attr('text-anchor', 'left')
    .style('font-size', '.75rem')
    .style('color', '#101436')
    .text('Sources available in technical publication.')


  legendGroup = d3.select('.climate-map')
    .append('g')
    .attr('x', 0)
    .attr('y', 0)

  textTangle = legendGroup
    .append('rect')
    .attr('x', 680)
    .attr('y', 280)
    .attr('width', 150)
    .attr('height', 140)
    .style('stroke-width', 0)
    .style('stroke', 'rgb(0,0,0)')
    .style('fill', 'rgb(255,255,255,.5)')

  const keys = ['Extremely low', 'Moderately low', 'Moderate', 'Moderately high', 'Extremely high']

  legendGroup
    .selectAll('legend')
    .data(keys)
    .enter()
    .append('circle')
      .attr('cx', 700)
      .attr('cy', (d,i) => 300 + i*25)
      .attr('r', 7)
      .style('fill', d => colors(d))
  d3.select('.climate-map')
    .selectAll('legend-labels')
    .data(keys)
    .enter()
    .append('text')
      .attr('x', 720)
      .attr('y', (d,i) => 300 + i*25)
      .text(d => d)
      .attr('text-anchor', 'left')
      .style('alignment-baseline', 'middle')
}

function addUpdateButtons() {
  d3.select('.layer-select').on('change', updateVulnerabilityMap)
}

function updateCharts(data) {
  const index = document.querySelector(".layer-select").value
  updateMapTitle(index)
  updateSpiderChart(data, index)
  updateBoxCharts(data)
  updateSidebar(data, index)
  selectedData = data;
}

function updateMapTitle(index) {
  switch (index) {
    case "vl_ht_c":
      d3.select(".climate-map__title").text("Vulnerability to Extreme Heat")
      d3.select(".climate-map__title-wrapper").attr("width", "450")
      break;
    case "vl_fz_c":
      d3.select(".climate-map__title")
      .text("Vulnerability to Riverine and Storm Surge Flooding")
      d3.select(".climate-map__title-wrapper").attr("width", "710")
      break;
    case "vl_8n_c":
      d3.select(".climate-map__title")
      .text("Vulnerability to Future Storm Surge Flooding: 8” Sea Level Rise")
      d3.select(".climate-map__title-wrapper").attr("width", "860")
      break;
    case "vl_339_c":
      d3.select(".climate-map__title")
      .text("Vulnerability to Future Storm Surge Flooding: 3’5” Sea Level Rise")
      d3.select(".climate-map__title-wrapper").attr("width", "890")
      break;
  }
}

function updateSidebar(data, index) {
  const indicators = ["ovrcwdp_pr", "grpqp_pr", "u5p_pr", "p65p_pr", "blt59p_pr", "blt80p_pr", "disp_pr", "hrtdp_pr", "asthp_pr", "diabp_pr", "jobexpp_pr", "rhup_pr", "novehp_pr", "nointp_pr", "hsplusp_pr", "mhi_pr", "povp_pr", "hisp_pr", "nhbp_pr", "nhasp_pr", "nhothp_pr", "aln65p_pr", "unempp_pr", "sngparp_pr", "lngisop_pr", "dres15p_pr", "nohinsp_pr"]

  const heatValue = document.getElementById("heat__value")
  const floodValue = document.getElementById("flood__value")
  const heatLabel = document.getElementById("heat__label")
  const floodLabel = document.getElementById("flood__label")

  if (index === "vul_ht") {
    heatValue.style.display="inline"
    heatLabel.style.display="inline"
    floodValue.style.display="none"
    floodLabel.style.display="none"
    heatValue.innerText = Math.round(data.properties.avgtemp_pr*100) + "%"
  } else {
    floodValue.style.display="inline"
    floodLabel.style.display="inline"
    heatValue.style.display="none"
    heatLabel.style.display="none"

    if (index === "vul_fz") {
      floodValue.innerText = Math.round(data.properties.fzp_pr * 100) + "%"
    } else if (index === "vul_8in") {
      floodValue.innerText = Math.round(data.properties.slr8inp_pr * 100) + "%"
    } else {
      floodValue.innerText = Math.round(data.properties.slr339p_pr * 100) + "%"
    }
  }

  indicators.forEach(indicator => {
    if (data.properties[indicator] === -9) {
      document.getElementById(indicator).innerText = "NA"
    } else {
      let value = Math.round((data.properties[indicator] * 100)) + "%"
      document.getElementById(indicator).innerText = value
    }
  })
}

function updateVulnerabilityMap() {
  const colors = d3.scaleOrdinal()
    .domain(['Extremely low', 'Moderately low', 'Moderate', 'Moderately high', 'Extremely high'])
    .range(['#0063e6', '#8accff', '#fcfcab', '#ffb624', '#ff5a50'])
    .unknown(['#ffffff']);
  d3.selectAll('.climate-map__heat > *')
    .attr('fill', data => colors(data.properties[this.value]))
}

function zoomed() {
  d3.selectAll('.climate-map__heat')
    .selectAll('path,circle')
    .attr('transform', d3.event.transform);
}

function addZoomToMaps() {
  const zoom = d3.zoom()
      .scaleExtent([1, 8])
      .on('zoom', zoomed);
  d3.select('.climate-map').call(zoom);
}

function spiderChartFramework() {
  const features = ["Exposure","Sensitivity","Adaptive Capacity"];
  const containerWidth = 300
  const containerHeight = 215
  const ticks = [.2,.4,.6,.8,1];

  let svg = d3.select(".spider-chart")
  .attr("width", containerWidth)
  .attr("height", containerHeight)

// Draw triangle guidelines
  ticks.forEach(t => {
    const ninetyDegrees = angleToCoordinate((Math.PI/2), t)
    const twoTenDegrees = angleToCoordinate((7*Math.PI / 6), t)
    const threeThirtyDegrees = angleToCoordinate((11*Math.PI / 6), t)

    svg.append("line")
    .attr("x1", ninetyDegrees.x)
    .attr("y1", ninetyDegrees.y)
    .attr("x2", threeThirtyDegrees.x)
    .attr("y2", threeThirtyDegrees.y)
    .attr("stroke","#C6C6C6")

    svg.append("line")
    .attr("x1", ninetyDegrees.x)
    .attr("y1", ninetyDegrees.y)
    .attr("x2", twoTenDegrees.x)
    .attr("y2", twoTenDegrees.y)
    .attr("stroke","#C6C6C6")

    svg.append("line")
    .attr("x1", twoTenDegrees.x)
    .attr("y1", twoTenDegrees.y)
    .attr("x2", threeThirtyDegrees.x)
    .attr("y2", threeThirtyDegrees.y)
    .attr("stroke", "#C6C6C6")
  })

  // Draw axis lines
  for (var i = 0; i < features.length; i++) {
    let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length);
    let line_coordinate = angleToCoordinate(angle, 1);

    svg.append("line")
    .attr("x1", 150)
    .attr("y1", 142)
    .attr("x2", line_coordinate.x)
    .attr("y2", line_coordinate.y)
    .attr("stroke","#101436")
    .attr("stroke-width", 1.5)
  }

  // Add tick markings
  ticks.forEach(t => {
    const ninetyDegrees = angleToCoordinate((Math.PI/2), t)
    const twoTenDegrees = angleToCoordinate((7*Math.PI / 6), t)
    const threeThirtyDegrees = angleToCoordinate((11*Math.PI / 6), t)
    svg.append("text")
    .attr("x", (ninetyDegrees.x) + 5)
    .attr("y", (ninetyDegrees.y) + 15)
    .text(t.toString())
    .attr("font-size", 10)

    if (t !== 1){
      svg.append("text")
      .attr("x", twoTenDegrees.x - 5)
      .attr("y", twoTenDegrees.y - 7)
      .text(t.toString())
      .attr("font-size", 10)
    }

    if (t !== .2) {
      svg.append("text")
      .attr("x", threeThirtyDegrees.x - 30)
      .attr("y", threeThirtyDegrees.y )
      .text(t.toString())
      .attr("font-size", 10)
    }
  })
}

function updateSpiderChart(inputData, index) {
  console.log(inputData)
  console.log(index)
  d3.select('.spider-chart').selectAll(".spider-chart__data").remove()
  d3.select('.spider-chart').selectAll('.spider-chart__icon--null').remove()
  switch (index) {
    case "vl_ht_c":
      data = {
        "Exposure": inputData.properties.avgtmp_,
        "Sensitivity": inputData.properties.sens_ht,
        "Adaptive Capacity": inputData.properties.ac_ht
      }
      break;
    case "vl_fz_c":
      data = {
        "Exposure": inputData.properties.fzp_pr,
        "Sensitivity": inputData.properties.sens_fz,
        "Adaptive Capacity": inputData.properties.ac_fz
      }
      break;
    case "vl_8n_c":
      data = {
        "Exposure": inputData.properties.slr8inp_pr,
        "Sensitivity": inputData.properties.sens_8in,
        "Adaptive Capacity": inputData.properties.ac_8in
      }
      break;
    case "vl_339_c":
      data = {
        "Exposure": inputData.properties.slr339p_pr,
        "Sensitivity": inputData.properties.sens_339,
        "Adaptive Capacity": inputData.properties.ac_339
      }
      break;
  }
  let line = d3.line()
  .x(d => d.x)
  .y(d => d.y);

  d3.selectAll('.sidebar__tract')
    .text(inputData.properties.NAMELSA);
  d3.selectAll('.sidebar__town')
    .text(inputData.properties.municpl)

  let coordinates = getPathCoordinates(data).filter(coordinate => Math.abs(coordinate.x) < 300 && Math.abs(coordinate.y) < 300)
  console.log(data)

  if (coordinates.length === 3) {
    d3.select('.spider-chart').append("path")
    .datum(coordinates)
    .attr("d",line)
    .attr("opacity", 0.6)
    .attr("class", "spider-chart__data")

  } else {
    if (data.Sensitivity === -9) {
      d3.select(".spider-chart")
      .append("image")
      .attr("x", 15)
      .attr("y", 165)
      .attr("href", "/assets/images/sensitivity-gray.png")
      .attr("class", "spider-chart__icon--null")
      .attr("width", 50)
      .attr("height", 50)
    }

    if (data.Exposure === -9) {
      d3.select(".spider-chart")
      .append("image")
      .attr("x", 130)
      .attr("y", 5)
      .attr("href", "/assets/images/exposure1-gray.png")
      .attr("class", "spider-chart__icon--null")
      .attr("width", 36)
      .attr("height", 36)

      d3.select(".spider-chart")
      .append("image")
      .attr("x", 147)
      .attr("y", 15)
      .attr("href", "/assets/images/exposure2-gray.png")
      .attr("class", "spider-chart__icon--null")
      .attr("width", 36)
      .attr("height", 36)
    }

    if (data["Adaptive Capacity"] === -9) {
      d3.select(".spider-chart")
      .append("image")
      .attr("x", 230)
      .attr("y", 165)
      .attr("href", "/assets/images/adaptive-capacity-gray.png")
      .attr("class", "spider-chart__icon--null")
      .attr("width", 50)
      .attr("height", 50)
    }
    coordinates.forEach(coordinate => {
      d3.select('.spider-chart').append('circle')
      .attr("cx", coordinate.x)
      .attr("cy", coordinate.y)
      .attr("r", 5)
      .attr("class", "spider-chart__data")
    })

    if (coordinates.length === 2) {
      d3.select('.spider-chart').append('line')
      .attr("x1", coordinates[0].x)
      .attr("y1", coordinates[0].y)
      .attr("x2", coordinates[1].x)
      .attr("y2", coordinates[1].y)
      .attr("class", "spider-chart__data")
    }
  }
}

function getPathCoordinates(data_point){
  let coordinates = [];
  const features = ["Exposure","Sensitivity","Adaptive Capacity"];
  for (var i = 0; i < features.length; i++) {
    let ft_name = features[i];
    let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length);
    coordinates.push(angleToCoordinate(angle, data_point[ft_name]));
  }
  return coordinates;
}

function angleToCoordinate(angle, value) {
  let radialScale = d3.scaleLinear()
  .domain([0,1])
  .range([0,100]);

  const triangleWidth = 120
  const triangleHeight = triangleWidth * (Math.sqrt(3)/2)
  const x = Math.cos(angle) * radialScale(value) +90;
  const y = Math.sin(angle) * radialScale(value) -90;
  return {"x": (triangleWidth/2) + x, "y": (triangleHeight/2) - y};
}

function distributionChartFramework(extractedData) {
  const boxPlots = ["ht", "fz", "8in", "339"]
  const distributionScale = d3.scaleLinear()
  .domain([0,1])
  .range([0,236]);

  boxPlots.forEach(plot => {
    const noNulls = extractedData.features.filter(datum => datum.properties[`vul_${plot}`] != -9).map(datum => +datum.properties[`vul_${plot}`]).sort()
    const svg = d3.select(`.box-plots__${plot}`)
    .attr("width", 236)
    .attr("height", 24)

    const firstQuantile = d3.quantile(noNulls, .25)
    const median = d3.median(noNulls)
    const thirdQuantile = d3.quantile(noNulls, .75)

    svg.append("line")
    .attr("x1", 0)
    .attr("x2", 236)
    .attr("y1", 12)
    .attr("y2", 12)
    .attr("stroke","#0F113D");

    svg.append("line")
    .attr("x1", 0.5)
    .attr("x2", 0.5)
    .attr("y1", 9)
    .attr("y2", 15)
    .attr("stroke","#0F113D");

    svg.append("line")
    .attr("x1", 235.5)
    .attr("x2", 235.5)
    .attr("y1", 9)
    .attr("y2", 15)
    .attr("stroke","#0F113D");

    svg.append("rect")
    .attr("x", distributionScale(firstQuantile))
    .attr("y", 4)
    .attr("width", distributionScale(thirdQuantile) - distributionScale(firstQuantile))
    .attr("height", 16)
    .attr("fill", "white")
    .attr("stroke", "#0F113D")

    svg.append("line")
    .attr("x1", distributionScale(median))
    .attr("y1", 4)
    .attr("x2", distributionScale(median))
    .attr("y2", 20)
    .attr("stroke", "#0F113D")
    .attr("stroke-width", 1)
  })
}

function updateBoxCharts(inputData) {
  document.querySelector(".box-plots__label--selected").classList.remove("box-plots__label--selected")
  document.getElementById(document.querySelector('.layer-select').value).classList.add("box-plots__label--selected")

  const boxPlots = ["ht", "fz", "8in", "339"]
  const distributionScale = d3.scaleLinear()
  .domain([0,1])
  .range([0,236]);

  boxPlots.forEach(plot => {
    const svg = d3.select(`.box-plots__${plot}`)
    svg.select(".box-plots__data-bar").remove()

    svg.append("line")
    .attr("x1", distributionScale(inputData.properties[`vul_${plot}`]))
    .attr("y1", 0)
    .attr("x2", distributionScale(inputData.properties[`vul_${plot}`]))
    .attr("y2", 24)
    .attr("stroke", "#E0A801")
    .attr("stroke-width", 5)
    .attr("class","box-plots__data-bar")
  })
}

window.addEventListener('DOMContentLoaded', () => {
  Promise.all([
    d3.json('/assets/data/20191210_final-dataset-with-percentile-rank-and-cat-bins_final.json'),
  ]).then((data) => {
    const extractedData = topojson.feature(data[0], data[0].objects['layer1']);
    const tractEleven = data[0].objects['layer1'].geometries[11];
    const topology = topojson.feature(data[0], data[0].objects['layer1']);
    selectedTract = tractEleven;
    createVulnerabilityMap(topology.features);
    addUpdateButtons();
    addZoomToMaps();
    spiderChartFramework();
    distributionChartFramework(extractedData);
    updateCharts(selectedTract);
    document.querySelector(".layer-select").addEventListener("change", function() {
      updateCharts(selectedTract)
    })
  });
});
